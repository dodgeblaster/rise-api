"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var deployStack_1 = require("./deployStack");
var removeStack_1 = require("./removeStack");
var getDeployStatus_1 = require("./getDeployStatus");
jest.setTimeout(30000);
var createTemplate = JSON.stringify({
    Resources: {
        Database: {
            Type: 'AWS::DynamoDB::Table',
            Properties: {
                TableName: 'example-table',
                AttributeDefinitions: [
                    { AttributeName: 'pk', AttributeType: 'S' },
                    { AttributeName: 'sk', AttributeType: 'S' }
                ],
                KeySchema: [
                    { AttributeName: 'pk', KeyType: 'HASH' },
                    { AttributeName: 'sk', KeyType: 'RANGE' }
                ],
                BillingMode: 'PAY_PER_REQUEST'
            }
        }
    }
});
var updateTemplate = JSON.stringify({
    Resources: {
        Database: {
            Type: 'AWS::DynamoDB::Table',
            Properties: {
                TableName: 'example-table',
                AttributeDefinitions: [
                    { AttributeName: 'pk', AttributeType: 'S' },
                    { AttributeName: 'sk', AttributeType: 'S' }
                ],
                KeySchema: [
                    { AttributeName: 'pk', KeyType: 'HASH' },
                    { AttributeName: 'sk', KeyType: 'RANGE' }
                ],
                Tags: {
                    Key: 'app',
                    Value: 'foundatio'
                },
                BillingMode: 'PAY_PER_REQUEST'
            }
        }
    },
    Outputs: {
    // something here
    }
});
test.skip('cf will work', function () { return __awaiter(void 0, void 0, void 0, function () {
    var createResult, createResult2, completeResult, removeResult;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, deployStack_1.deployStack)({
                    name: 'testingstack',
                    template: createTemplate
                })
                //{"status":"creating","id":"arn:aws:cloudformation:us-east-1:251256923172:stack/testingstack/958805f0-15bb-11ec-a375-12f6d51fe9c7"}
            ];
            case 1:
                createResult = _a.sent();
                //{"status":"creating","id":"arn:aws:cloudformation:us-east-1:251256923172:stack/testingstack/958805f0-15bb-11ec-a375-12f6d51fe9c7"}
                console.log('CREATE:: ', JSON.stringify(createResult));
                return [4 /*yield*/, (0, deployStack_1.deployStack)({
                        name: 'testingstack',
                        template: createTemplate
                    })
                    //{"status":"createinprogress"}
                ];
            case 2:
                createResult2 = _a.sent();
                //{"status":"createinprogress"}
                console.log('CREATE2:: ', JSON.stringify(createResult2));
                return [4 /*yield*/, (0, getDeployStatus_1.getDeployStatus)({
                        config: {
                            stackName: 'testingstack',
                            minRetryInterval: 1000,
                            maxRetryInterval: 5000,
                            backoffRate: 1.2,
                            maxRetries: 50,
                            onCheck: function (x) {
                                console.log('>>> ', JSON.stringify(x));
                            }
                        }
                    })];
            case 3:
                completeResult = _a.sent();
                console.log('compelte-- ', completeResult);
                return [4 /*yield*/, (0, removeStack_1.removeStack)({
                        name: 'testingstack',
                        template: createTemplate
                    })
                    // get complete status on stack
                ];
            case 4:
                removeResult = _a.sent();
                return [2 /*return*/];
        }
    });
}); });
