"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makePipeline = void 0;
var makeSourceAction = function (config) {
    return {
        Name: config.name,
        ActionTypeId: {
            Category: 'Source',
            Owner: 'AWS',
            Provider: 'CodeStarSourceConnection',
            Version: '1'
        },
        Configuration: {
            ConnectionArn: {
                Ref: 'CodeStarConnection'
            },
            FullRepositoryId: config.owner + "/" + config.repo,
            BranchName: 'main'
        },
        OutputArtifacts: [
            {
                Name: config.outputArtifact
            }
        ]
    };
};
var makeBuildAction = function (config) {
    var envVariables = Object.keys(config.env).map(function (k) {
        var v = config.env[k];
        var type = 'PLAINTEXT';
        if (v.startsWith('@ssm.')) {
            v = v.split('@ssm.').slice(1).join();
            type = 'PARAMETER_STORE';
        }
        if (v.startsWith('@secret.')) {
            v = v.split('@secret.').slice(1).join();
            type = 'SECRETS_MANAGER';
        }
        return {
            name: k,
            value: v,
            type: type
        };
    });
    return {
        Name: config.name,
        ActionTypeId: {
            Category: 'Build',
            Owner: 'AWS',
            Provider: 'CodeBuild',
            Version: '1'
        },
        Configuration: {
            ProjectName: config.projectCFName,
            EnvironmentVariables: JSON.stringify(envVariables)
        },
        InputArtifacts: [
            {
                Name: config.inputArtifact
            }
        ],
        OutputArtifacts: [
            {
                Name: config.outputArtifact
            }
        ]
    };
};
var makeInvokeAction = function (config) {
    return {
        Name: config.name,
        ActionTypeId: {
            Category: 'Invoke',
            Owner: 'AWS',
            Provider: 'Lambda',
            Version: '1'
        },
        Configuration: {
            FunctionName: config.functionName
        },
        OutputArtifacts: [],
        InputArtifacts: [],
        Region: config.region
    };
};
var makeApprovalAction = function (config) {
    return {
        Name: config.name,
        ActionTypeId: {
            Category: 'Approval',
            Owner: 'AWS',
            Provider: 'Manual',
            Version: '1'
        }
    };
};
var makeStage = function (config) {
    var actions = config.actions.map(function (x) {
        if (x.type === 'SOURCE')
            return makeSourceAction(x);
        if (x.type === 'BUILD')
            return makeBuildAction(x);
        if (x.type === 'INVOKE')
            return makeInvokeAction(x);
        if (x.type === 'APPROVAL')
            return makeApprovalAction(x);
        throw new Error('Not a valid action');
    });
    return {
        Name: config.name,
        Actions: actions.map(function (x, i) {
            return __assign(__assign({}, x), { RunOrder: i + 1 });
        })
    };
};
function makePipeline(config) {
    var stages = config.stages.map(makeStage);
    return {
        Resources: {
            AppPipeline: {
                Type: 'AWS::CodePipeline::Pipeline',
                Properties: {
                    Name: config.pipelineName,
                    RoleArn: {
                        'Fn::GetAtt': ['CodePipelineServiceRole', 'Arn']
                    },
                    ArtifactStore: {
                        Type: 'S3',
                        Location: {
                            Ref: 'CodePipelineArtifactStoreBucket'
                        }
                    },
                    Stages: stages
                }
            },
            CodePipelineServiceRole: {
                Type: 'AWS::IAM::Role',
                Properties: {
                    AssumeRolePolicyDocument: {
                        Version: '2012-10-17',
                        Statement: [
                            {
                                Effect: 'Allow',
                                Principal: {
                                    Service: ['codepipeline.amazonaws.com']
                                },
                                Action: 'sts:AssumeRole'
                            }
                        ]
                    },
                    Path: '/',
                    Policies: [
                        {
                            PolicyName: 'AWS-CodePipeline-Service-3',
                            PolicyDocument: {
                                Version: '2012-10-17',
                                Statement: [
                                    {
                                        Effect: 'Allow',
                                        Action: [
                                            'codecommit:CancelUploadArchive',
                                            'codecommit:GetBranch',
                                            'codecommit:GetCommit',
                                            'codecommit:GetUploadArchiveStatus',
                                            'codecommit:UploadArchive'
                                        ],
                                        Resource: '*'
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: [
                                            'codedeploy:CreateDeployment',
                                            'codedeploy:GetApplicationRevision',
                                            'codedeploy:GetDeployment',
                                            'codedeploy:GetDeploymentConfig',
                                            'codedeploy:RegisterApplicationRevision'
                                        ],
                                        Resource: '*'
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: [
                                            'codebuild:BatchGetBuilds',
                                            'codebuild:StartBuild'
                                        ],
                                        Resource: '*'
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: [
                                            'lambda:InvokeFunction',
                                            'lambda:ListFunctions'
                                        ],
                                        Resource: '*'
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: ['iam:PassRole'],
                                        Resource: '*'
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: [
                                            'elasticbeanstalk:*',
                                            'ec2:*',
                                            'elasticloadbalancing:*',
                                            'autoscaling:*',
                                            'cloudwatch:*',
                                            's3:*',
                                            'sns:*',
                                            'cloudformation:*',
                                            'rds:*',
                                            'sqs:*',
                                            'ecs:*'
                                        ],
                                        Resource: '*'
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: [
                                            'codestar-connections:UseConnection'
                                        ],
                                        Resource: [
                                            {
                                                Ref: 'CodeStarConnection'
                                            },
                                            '*'
                                        ]
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: [
                                            's3:GetObject',
                                            's3:GetObjectVersion',
                                            's3:PutObject'
                                        ],
                                        Resource: ['*']
                                    },
                                    {
                                        Effect: 'Allow',
                                        Action: ['*'],
                                        Resource: ['*']
                                    }
                                ]
                            }
                        }
                    ]
                }
            }
        }
    };
}
exports.makePipeline = makePipeline;
