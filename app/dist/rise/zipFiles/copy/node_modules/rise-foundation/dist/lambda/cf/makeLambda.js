"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.makeLambda = void 0;
/*
{
    Effect: 'Allow',
    Action: ['dynamodb:*'],
    Resource: [
        {
            'Fn::Sub': [
                'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/' +
                    props.dbName,
                {}
            ]
        }
    ]
}
*/
function makeLambda(props) {
    var _a;
    var b = props.bucketArn.split(':::')[1];
    var basePermissions = [
        {
            Action: ['logs:CreateLogStream'],
            Resource: [
                {
                    'Fn::Sub': [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/" + props.appName + "-" + props.name + "-" + props.stage + ":*",
                        {}
                    ]
                }
            ],
            Effect: 'Allow'
        },
        {
            Action: ['logs:PutLogEvents'],
            Resource: [
                {
                    'Fn::Sub': [
                        "arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/" + props.appName + "-" + props.name + "-" + props.stage + ":*:*",
                        {}
                    ]
                }
            ],
            Effect: 'Allow'
        }
    ];
    var permissions = __spreadArray(__spreadArray([], basePermissions, true), props.permissions, true);
    return {
        Resources: (_a = {},
            /**
             * Log Group
             *
             */
            _a["Lambda" + props.name + props.stage + "LogGroup"] = {
                Type: 'AWS::Logs::LogGroup',
                Properties: {
                    LogGroupName: "/aws/lambda/" + props.appName + "-" + props.name + "-" + props.stage
                }
            },
            /**
             * Lambda Function
             *
             */
            _a["Lambda" + props.name + props.stage] = {
                Type: 'AWS::Lambda::Function',
                Properties: {
                    Code: {
                        S3Bucket: b,
                        S3Key: props.bucketKey
                    },
                    FunctionName: props.appName + "-" + props.name + "-" + props.stage,
                    Handler: props.handler || 'index.handler',
                    MemorySize: 1024,
                    Role: {
                        'Fn::GetAtt': [
                            "Lambda" + props.name + props.stage + "Role",
                            'Arn'
                        ]
                    },
                    Runtime: 'nodejs14.x',
                    Timeout: props.timeout || 6,
                    Environment: {
                        Variables: props.env || {}
                    },
                    Layers: props.layers || []
                },
                DependsOn: ["Lambda" + props.name + props.stage + "LogGroup"]
            },
            /**
             * Lambda Function Role
             *
             */
            _a["Lambda" + props.name + props.stage + "Role"] = {
                Type: 'AWS::IAM::Role',
                Properties: {
                    AssumeRolePolicyDocument: {
                        Version: '2012-10-17',
                        Statement: [
                            {
                                Effect: 'Allow',
                                Principal: {
                                    Service: ['lambda.amazonaws.com']
                                },
                                Action: ['sts:AssumeRole']
                            }
                        ]
                    },
                    Policies: [
                        {
                            PolicyName: "Lambda" + props.appName + props.name + props.stage + "RolePolicy",
                            PolicyDocument: {
                                Version: '2012-10-17',
                                Statement: permissions
                            }
                        }
                    ],
                    Path: '/',
                    RoleName: "Lambda" + props.appName + props.name + props.stage + "Role"
                }
            },
            _a)
    };
}
exports.makeLambda = makeLambda;
