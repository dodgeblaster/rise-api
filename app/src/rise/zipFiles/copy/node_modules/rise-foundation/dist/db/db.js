"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeDbItem = exports.setDbItem = exports.createDbItem = exports.listDbItems = exports.getDbItem = void 0;
var format_keys_1 = require("./utils/format_keys");
var AWS = require('aws-sdk');
var region = process.env.AWS_REGION || 'us-east-1';
var db = new AWS.DynamoDB.DocumentClient({
    region: region
});
/** Get an item from a DynamoDB table */
function getDbItem(input, table) {
    if (table === void 0) { table = process.env.TABLE; }
    return __awaiter(this, void 0, void 0, function () {
        var item, item, item;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!input.sk) {
                        throw new Error('Input must have sk defined');
                    }
                    if (!input.pk) return [3 /*break*/, 2];
                    return [4 /*yield*/, db
                            .get({
                            TableName: table,
                            Key: {
                                pk: input.pk,
                                sk: input.sk
                            }
                        })
                            .promise()];
                case 1:
                    item = _a.sent();
                    return [2 /*return*/, item.Item || false];
                case 2:
                    if (!input.pk2) return [3 /*break*/, 4];
                    return [4 /*yield*/, db
                            .get({
                            TableName: table,
                            IndexName: 'pk2',
                            Key: {
                                pk2: input.pk2,
                                sk: input.sk
                            }
                        })
                            .promise()];
                case 3:
                    item = _a.sent();
                    return [2 /*return*/, item.Item || false];
                case 4:
                    if (!input.pk3) return [3 /*break*/, 6];
                    return [4 /*yield*/, db
                            .get({
                            TableName: table,
                            IndexName: 'pk3',
                            Key: {
                                pk3: input.pk3,
                                sk: input.sk
                            }
                        })
                            .promise()];
                case 5:
                    item = _a.sent();
                    return [2 /*return*/, item.Item || false];
                case 6: throw new Error('Input must have pk, pk2, or pk3 defined');
            }
        });
    });
}
exports.getDbItem = getDbItem;
/** Query items in a DynamoDB table with begins with  */
function listDbItems(input, table) {
    if (table === void 0) { table = process.env.TABLE; }
    return __awaiter(this, void 0, void 0, function () {
        var params, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!input.sk) {
                        throw new Error('Input must have sk defined');
                    }
                    if (!input.pk && !input.pk2 && !input.pk3) {
                        throw new Error('Input must have either pk, pk2, or pk3 defined');
                    }
                    params = {};
                    if (input.pk) {
                        params = __assign(__assign(__assign({ TableName: table }, (input.limit ? { Limit: input.limit } : {})), (input.startAt ? { ExclusiveStartKey: input.startAt } : {})), { KeyConditionExpression: 'pk = :pk AND begins_with(sk, :sk)', ExpressionAttributeValues: {
                                ':pk': input.pk,
                                ':sk': input.sk
                            } });
                    }
                    if (input.pk2) {
                        params = __assign(__assign(__assign({ TableName: table }, (input.limit ? { Limit: input.limit } : {})), (input.startAt ? { ExclusiveStartKey: input.startAt } : {})), { IndexName: 'pk2', KeyConditionExpression: 'pk2 = :gsi AND begins_with(sk, :sk)', ExpressionAttributeValues: {
                                ':gsi': input.pk2,
                                ':sk': input.sk
                            } });
                    }
                    if (input.pk3) {
                        params = __assign(__assign(__assign({ TableName: table }, (input.limit ? { Limit: input.limit } : {})), (input.startAt ? { ExclusiveStartKey: input.startAt } : {})), { IndexName: 'pk3', KeyConditionExpression: 'pk3 = :gsi AND begins_with(sk, :sk)', ExpressionAttributeValues: {
                                ':gsi': input.pk3,
                                ':sk': input.sk
                            } });
                    }
                    return [4 /*yield*/, db.query(params).promise()];
                case 1:
                    result = _a.sent();
                    return [2 /*return*/, result.Items || []];
            }
        });
    });
}
exports.listDbItems = listDbItems;
/**
 * Put an item into a DynamoDB table.
 * This will error if item already exists in table
 */
function createDbItem(input, table) {
    if (table === void 0) { table = process.env.TABLE; }
    return __awaiter(this, void 0, void 0, function () {
        var createItem, e_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!input.pk && !input.pk2 && !input.pk3) {
                        throw new Error('create must have either pk, pk2, or pk3 defined');
                    }
                    if (!input.sk) {
                        throw new Error('create must have a sk defined');
                    }
                    createItem = function () { return __awaiter(_this, void 0, void 0, function () {
                        var formattedInput;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    formattedInput = (0, format_keys_1.formatKeys)(input);
                                    return [4 /*yield*/, db
                                            .put({
                                            TableName: table,
                                            Item: formattedInput,
                                            ConditionExpression: 'attribute_not_exists(sk)'
                                        })
                                            .promise()];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/, formattedInput];
                            }
                        });
                    }); };
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 6]);
                    return [4 /*yield*/, createItem()];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    e_1 = _a.sent();
                    if (!(e_1.message.includes('ConditionalCheckFailedException') &&
                        input.sk.includes('@id'))) return [3 /*break*/, 5];
                    return [4 /*yield*/, createItem()];
                case 4: return [2 /*return*/, _a.sent()];
                case 5: throw new Error(e_1);
                case 6: return [2 /*return*/];
            }
        });
    });
}
exports.createDbItem = createDbItem;
/**
 * Put an item into a DynamoDB table.
 * This will overwrite if item already exists in table
 */
function setDbItem(input, table) {
    if (table === void 0) { table = process.env.TABLE; }
    return __awaiter(this, void 0, void 0, function () {
        var formattedInput;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!input.pk && !input.pk2 && !input.pk3) {
                        throw new Error('create must have either pk, pk2, or pk3 defined');
                    }
                    if (!input.sk) {
                        throw new Error('create must have a sk defined');
                    }
                    formattedInput = (0, format_keys_1.formatKeys)(input);
                    return [4 /*yield*/, db
                            .put({
                            TableName: table,
                            Item: formattedInput
                        })
                            .promise()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, formattedInput];
            }
        });
    });
}
exports.setDbItem = setDbItem;
/** Remove an item from a DynamoDB Tables */
function removeDbItem(input, table) {
    if (table === void 0) { table = process.env.TABLE; }
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, db
                        .delete({
                        TableName: table,
                        Key: {
                            pk: input.pk,
                            sk: input.sk
                        }
                    })
                        .promise()];
                case 1:
                    _a.sent();
                    return [2 /*return*/, input];
            }
        });
    });
}
exports.removeDbItem = removeDbItem;
