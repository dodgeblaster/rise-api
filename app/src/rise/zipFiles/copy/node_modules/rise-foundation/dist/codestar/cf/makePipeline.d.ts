declare type SourceActionInput = {
    type: 'SOURCE';
    name: string;
    owner: string;
    repo: string;
    outputArtifact: string;
};
declare type BuildActionInput = {
    type: 'BUILD';
    name: string;
    projectCFName: string;
    env: Record<string, string>;
    inputArtifact: string;
    outputArtifact: string;
};
declare type InvokeActionInput = {
    type: 'INVOKE';
    name: string;
    functionName: string;
    region: string;
};
declare type ApprovalActionInput = {
    type: 'APPROVAL';
    name: string;
};
declare type Action = SourceActionInput | BuildActionInput | InvokeActionInput | ApprovalActionInput;
declare type StageInput = {
    name: string;
    actions: Action[];
};
declare type PipelineInput = {
    pipelineName: string;
    stages: StageInput[];
};
export declare function makePipeline(config: PipelineInput): {
    Resources: {
        AppPipeline: {
            Type: string;
            Properties: {
                Name: string;
                RoleArn: {
                    'Fn::GetAtt': string[];
                };
                ArtifactStore: {
                    Type: string;
                    Location: {
                        Ref: string;
                    };
                };
                Stages: {
                    Name: string;
                    Actions: {
                        RunOrder: number;
                        Name: string;
                        ActionTypeId: {
                            Category: string;
                            Owner: string;
                            Provider: string;
                            Version: string;
                        };
                    }[];
                }[];
            };
        };
        CodePipelineServiceRole: {
            Type: string;
            Properties: {
                AssumeRolePolicyDocument: {
                    Version: string;
                    Statement: {
                        Effect: string;
                        Principal: {
                            Service: string[];
                        };
                        Action: string;
                    }[];
                };
                Path: string;
                Policies: {
                    PolicyName: string;
                    PolicyDocument: {
                        Version: string;
                        Statement: ({
                            Effect: string;
                            Action: string[];
                            Resource: string;
                        } | {
                            Effect: string;
                            Action: string[];
                            Resource: (string | {
                                Ref: string;
                            })[];
                        })[];
                    };
                }[];
            };
        };
    };
};
export {};
