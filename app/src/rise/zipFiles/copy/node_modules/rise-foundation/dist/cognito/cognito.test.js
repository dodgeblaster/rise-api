"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var createUser_1 = require("./createUser");
var removeUser_1 = require("./removeUser");
var loginUser_1 = require("./loginUser");
var loginHandleNewPassword_1 = require("./loginHandleNewPassword");
var validateJwtToken_1 = require("./validateJwtToken");
var resetPassword_1 = require("./resetPassword");
var aws_sdk_1 = __importDefault(require("aws-sdk"));
function getCognitoIds(props) {
    return __awaiter(this, void 0, void 0, function () {
        function getOutput(outputs, value) {
            var v = outputs.find(function (x) { return x.OutputKey === value; });
            return v ? v.OutputValue : false;
        }
        var cloudformation, params, x, details, outputs, res, _i, _a, o;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    cloudformation = new aws_sdk_1.default.CloudFormation({
                        region: 'us-east-1'
                    });
                    params = {
                        StackName: props.stack
                    };
                    return [4 /*yield*/, cloudformation.describeStacks(params).promise()];
                case 1:
                    x = _b.sent();
                    details = x.Stacks[0];
                    outputs = details.Outputs;
                    res = {};
                    for (_i = 0, _a = props.outputs; _i < _a.length; _i++) {
                        o = _a[_i];
                        res[o] = getOutput(outputs, o);
                    }
                    return [2 /*return*/, res];
            }
        });
    });
}
test('cognito user management works', function () { return __awaiter(void 0, void 0, void 0, function () {
    var _a, CognitoUserPoolId, CognitoUserPoolClientId, poolId, clientId, res, loginRes, tokens, validateRes, resetRes, resetLoginRes, res2;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, getCognitoIds({
                    stack: 'RiseFoundationTestStack',
                    outputs: ['CognitoUserPoolId', 'CognitoUserPoolClientId']
                })];
            case 1:
                _a = _b.sent(), CognitoUserPoolId = _a.CognitoUserPoolId, CognitoUserPoolClientId = _a.CognitoUserPoolClientId;
                poolId = CognitoUserPoolId;
                clientId = CognitoUserPoolClientId;
                return [4 /*yield*/, (0, createUser_1.createUser)({
                        email: 'garysjennings@gmail.com',
                        userPoolId: poolId
                    })];
            case 2:
                res = _b.sent();
                expect(res.email).toBe('garysjennings@gmail.com');
                expect(typeof res.password).toBe('string');
                return [4 /*yield*/, (0, loginUser_1.loginUser)({
                        userName: 'garysjennings@gmail.com',
                        password: res.password,
                        userPoolId: poolId,
                        clientId: clientId
                    })
                    // @ts-ignore
                ];
            case 3:
                loginRes = _b.sent();
                // @ts-ignore
                expect(loginRes.challenge).toBe('NEW_PASSWORD');
                // @ts-ignore
                expect(typeof loginRes.session).toBe('string');
                return [4 /*yield*/, (0, loginHandleNewPassword_1.loginHandleNewPassword)({
                        // @ts-ignore
                        session: loginRes.session,
                        userName: 'garysjennings@gmail.com',
                        newPassword: res.password,
                        userPoolId: poolId,
                        clientId: clientId
                    })];
            case 4:
                tokens = _b.sent();
                expect(typeof tokens.accessToken).toBe('string');
                expect(typeof tokens.refreshToken).toBe('string');
                expect(typeof tokens.idToken).toBe('string');
                return [4 /*yield*/, (0, validateJwtToken_1.validateToken)({
                        token: tokens.accessToken,
                        userPoolId: poolId
                    })];
            case 5:
                validateRes = _b.sent();
                expect(validateRes.userName).toBe('garysjennings@gmail.com');
                expect(typeof validateRes.clientId).toBe('string');
                expect(validateRes.isValid).toBe(true);
                return [4 /*yield*/, (0, resetPassword_1.resetPassword)({
                        email: 'garysjennings@gmail.com',
                        userPoolId: poolId
                    })];
            case 6:
                resetRes = _b.sent();
                return [4 /*yield*/, (0, loginUser_1.loginUser)({
                        userName: 'garysjennings@gmail.com',
                        password: resetRes.password,
                        userPoolId: poolId,
                        clientId: clientId
                    })
                    // @ts-ignore
                ];
            case 7:
                resetLoginRes = _b.sent();
                // @ts-ignore
                expect(resetLoginRes.challenge).toBe('NEW_PASSWORD');
                return [4 /*yield*/, (0, removeUser_1.removeUser)({
                        email: 'garysjennings@gmail.com',
                        userPoolId: poolId
                    })];
            case 8:
                res2 = _b.sent();
                expect(res2).toBe(true);
                return [2 /*return*/];
        }
    });
}); });
