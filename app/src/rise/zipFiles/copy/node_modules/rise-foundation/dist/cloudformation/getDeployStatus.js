"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDeployStatus = void 0;
var aws_sdk_1 = __importDefault(require("aws-sdk"));
/**
 * GetStackInfo
 *
 */
var getStackInfo = function (AWS, region) { return function (name) { return __awaiter(void 0, void 0, void 0, function () {
    var cloudformation, params, x;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                cloudformation = new AWS.CloudFormation({
                    region: region
                });
                params = {
                    StackName: name
                };
                return [4 /*yield*/, cloudformation.describeStacks(params).promise()];
            case 1:
                x = _a.sent();
                return [2 /*return*/, x.Stacks[0]];
        }
    });
}); }; };
/**
 * GetStackResourceStatus
 *
 */
var getStackResourceStatus = function (AWS, region) { return function (name) { return __awaiter(void 0, void 0, void 0, function () {
    var cloudformation, params;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                cloudformation = new AWS.CloudFormation({
                    region: region
                });
                params = {
                    StackName: name
                };
                return [4 /*yield*/, cloudformation.describeStackResources(params).promise()];
            case 1: return [2 /*return*/, _a.sent()];
        }
    });
}); }; };
/**
 * Get Cloudformation stack info and outputs
 */
function getCloudFormationStackInfo(getInfo, name) {
    return __awaiter(this, void 0, void 0, function () {
        var data, status, message, outputs;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getInfo(name)];
                case 1:
                    data = _a.sent();
                    status = data.StackStatus;
                    message = data.StackStatusReason;
                    outputs = data.Outputs;
                    return [2 /*return*/, {
                            status: status,
                            message: message,
                            outputs: outputs
                        }];
            }
        });
    });
}
/**
 * Display and return:
 * "we checked the max amount of times, and Cloudformation is still deploying"
 */
function stillInProgressState() {
    return {
        status: 'in progress',
        message: 'Cloudformation is still deploying...'
    };
}
/**
 * Display current deploy status of all resources
 * wait some time
 * and check the status again
 */
// @ts-ignore
function checkAgainState(io, config, timer, times) {
    return __awaiter(this, void 0, void 0, function () {
        var wait, resourceProgress, xx, resources, increasedTimer, newTimer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    wait = function (time) {
                        return new Promise(function (r) { return setTimeout(function () { return r(); }, time); });
                    };
                    return [4 /*yield*/, wait(timer)
                        /**
                         * Get status of all resources
                         */
                    ];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, io.getResources(config.stackName)];
                case 2:
                    resourceProgress = _a.sent();
                    xx = {
                        ResponseMetadata: { RequestId: '21f88cc8-94ea-4b50-a089-9b55ddd20c2e' },
                        StackResources: [
                            {
                                StackName: 'testingstack',
                                StackId: 'arn:aws:cloudformation:us-east-1:251256923172:stack/testingstack/ef160310-15d4-11ec-bfcb-12d63f44d7b7',
                                LogicalResourceId: 'Database',
                                PhysicalResourceId: 'example-table',
                                ResourceType: 'AWS::DynamoDB::Table',
                                Timestamp: '2021-09-15T03:28:08.237Z',
                                ResourceStatus: 'CREATE_IN_PROGRESS',
                                ResourceStatusReason: 'Resource creation Initiated',
                                DriftInformation: { StackResourceDriftStatus: 'NOT_CHECKED' }
                            }
                        ]
                    };
                    resources = resourceProgress.StackResources.map(function (x) { return ({
                        id: x.LogicalResourceId,
                        status: x.ResourceStatus,
                        type: x.ResourceType
                    }); });
                    config.onCheck(resources, times);
                    increasedTimer = timer * config.backoffRate;
                    newTimer = increasedTimer > config.maxRetryInterval
                        ? config.maxRetryInterval
                        : increasedTimer;
                    return [4 /*yield*/, recursiveCheck(io, config, times + 1, newTimer)];
                case 3: return [2 /*return*/, _a.sent()];
            }
        });
    });
}
/**
 * Display and return deploy failure message
 */
function failState(message) {
    return {
        status: 'fail',
        message: message
    };
}
/**
 * Display and return deploy success state
 * and deployed app resource details
 */
function completeState(stackInfo) {
    return {
        status: 'success',
        message: 'success',
        info: stackInfo
    };
}
/**
 * Display and return an unkonwn state
 * this happens if cloudformation returns an unknown or undefined
 * status
 */
function unknownState() {
    return {
        status: 'fail',
        message: 'Cloudformation is in an unknown state'
    };
}
// @ts-ignore
function recursiveCheck(io, config, times, timer) {
    return __awaiter(this, void 0, void 0, function () {
        var stackInfo;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, getCloudFormationStackInfo(io.getInfo, config.stackName)];
                case 1:
                    stackInfo = _a.sent();
                    if (times === config.maxRetries) {
                        return [2 /*return*/, stillInProgressState()];
                    }
                    if (!stackInfo.status.includes('PROGRESS')) return [3 /*break*/, 3];
                    return [4 /*yield*/, checkAgainState(io, config, timer, times)];
                case 2: return [2 /*return*/, _a.sent()];
                case 3:
                    if (stackInfo.status.includes('FAIL')) {
                        return [2 /*return*/, failState(stackInfo.message)];
                    }
                    if (stackInfo.status.includes('COMPLETE')) {
                        return [2 /*return*/, completeState(stackInfo)];
                    }
                    return [2 /*return*/, unknownState()];
            }
        });
    });
}
function getDeployStatus(props) {
    return __awaiter(this, void 0, void 0, function () {
        var aws, region;
        return __generator(this, function (_a) {
            aws = props.AWS || aws_sdk_1.default;
            region = props.region || process.env.AWS_REGION || 'us-east-1';
            return [2 /*return*/, recursiveCheck({
                    getInfo: getStackInfo(aws, region),
                    getResources: getStackResourceStatus(aws, region)
                }, props.config, 1, props.config.minRetryInterval)];
        });
    });
}
exports.getDeployStatus = getDeployStatus;
