export declare type MakeLambdaInput = {
    appName: string;
    name: string;
    stage: String;
    bucketArn: string;
    bucketKey: string;
    permissions: any[];
    env?: any;
    handler?: string;
    timeout?: number;
    layers?: string[];
};
export declare function makeLambda(props: MakeLambdaInput): {
    Resources: {
        [x: string]: {
            Type: string;
            Properties: {
                LogGroupName: string;
                Code?: undefined;
                FunctionName?: undefined;
                Handler?: undefined;
                MemorySize?: undefined;
                Role?: undefined;
                Runtime?: undefined;
                Timeout?: undefined;
                Environment?: undefined;
                Layers?: undefined;
                AssumeRolePolicyDocument?: undefined;
                Policies?: undefined;
                Path?: undefined;
                RoleName?: undefined;
            };
            DependsOn?: undefined;
        } | {
            Type: string;
            Properties: {
                Code: {
                    S3Bucket: string;
                    S3Key: string;
                };
                FunctionName: string;
                Handler: string;
                MemorySize: number;
                Role: {
                    'Fn::GetAtt': string[];
                };
                Runtime: string;
                Timeout: number;
                Environment: {
                    Variables: any;
                };
                Layers: string[];
                LogGroupName?: undefined;
                AssumeRolePolicyDocument?: undefined;
                Policies?: undefined;
                Path?: undefined;
                RoleName?: undefined;
            };
            DependsOn: string[];
        } | {
            Type: string;
            Properties: {
                AssumeRolePolicyDocument: {
                    Version: string;
                    Statement: {
                        Effect: string;
                        Principal: {
                            Service: string[];
                        };
                        Action: string[];
                    }[];
                };
                Policies: {
                    PolicyName: string;
                    PolicyDocument: {
                        Version: string;
                        Statement: any[];
                    };
                }[];
                Path: string;
                RoleName: string;
                LogGroupName?: undefined;
                Code?: undefined;
                FunctionName?: undefined;
                Handler?: undefined;
                MemorySize?: undefined;
                Role?: undefined;
                Runtime?: undefined;
                Timeout?: undefined;
                Environment?: undefined;
                Layers?: undefined;
            };
            DependsOn?: undefined;
        };
    };
};
