"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var db_1 = require("./db");
process.env.TABLE = 'RiseFoundationIntegrationTestTable';
test('db works', function () { return __awaiter(void 0, void 0, void 0, function () {
    var item, getItem, listItem, listItem2, listItem3, removedItem, noItem, idTestItem;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, db_1.setDbItem)({
                    pk: 'user_1234',
                    sk: 'item_1234',
                    pk2: 'team_1234',
                    pk3: 'org_1234'
                })];
            case 1:
                item = _a.sent();
                expect(item).toEqual({
                    pk: 'user_1234',
                    sk: 'item_1234',
                    pk2: 'team_1234',
                    pk3: 'org_1234'
                });
                return [4 /*yield*/, (0, db_1.setDbItem)({
                        pk: 'user_1235',
                        sk: 'item_1235',
                        pk2: 'team_1234',
                        pk3: 'org_1234'
                    })];
            case 2:
                _a.sent();
                return [4 /*yield*/, (0, db_1.setDbItem)({
                        pk: 'user_1236',
                        sk: 'item_1236',
                        pk2: 'team_1235',
                        pk3: 'org_1234'
                    })
                    /**
                     * Testing Get
                     *
                     */
                ];
            case 3:
                _a.sent();
                return [4 /*yield*/, (0, db_1.getDbItem)({
                        pk: 'user_1234',
                        sk: 'item_1234'
                    })];
            case 4:
                getItem = _a.sent();
                expect(getItem).toEqual({
                    pk3: 'org_1234',
                    sk: 'item_1234',
                    pk2: 'team_1234',
                    pk: 'user_1234'
                });
                return [4 /*yield*/, (0, db_1.listDbItems)({
                        pk: 'user_1234',
                        sk: 'item_'
                    })];
            case 5:
                listItem = _a.sent();
                expect(listItem).toEqual([
                    {
                        pk3: 'org_1234',
                        sk: 'item_1234',
                        pk2: 'team_1234',
                        pk: 'user_1234'
                    }
                ]);
                return [4 /*yield*/, (0, db_1.listDbItems)({
                        pk2: 'team_1234',
                        sk: 'item_'
                    })];
            case 6:
                listItem2 = _a.sent();
                expect(listItem2).toEqual([
                    {
                        pk3: 'org_1234',
                        sk: 'item_1234',
                        pk2: 'team_1234',
                        pk: 'user_1234'
                    },
                    {
                        pk3: 'org_1234',
                        sk: 'item_1235',
                        pk2: 'team_1234',
                        pk: 'user_1235'
                    }
                ]);
                return [4 /*yield*/, (0, db_1.listDbItems)({
                        pk3: 'org_1234',
                        sk: 'item_'
                    })];
            case 7:
                listItem3 = _a.sent();
                expect(listItem3).toEqual([
                    {
                        pk3: 'org_1234',
                        sk: 'item_1234',
                        pk2: 'team_1234',
                        pk: 'user_1234'
                    },
                    {
                        pk3: 'org_1234',
                        sk: 'item_1235',
                        pk2: 'team_1234',
                        pk: 'user_1235'
                    },
                    {
                        pk3: 'org_1234',
                        sk: 'item_1236',
                        pk2: 'team_1235',
                        pk: 'user_1236'
                    }
                ]);
                return [4 /*yield*/, (0, db_1.removeDbItem)({
                        pk: 'user_1234',
                        sk: 'item_1234'
                    })];
            case 8:
                removedItem = _a.sent();
                return [4 /*yield*/, (0, db_1.removeDbItem)({
                        pk: 'user_1235',
                        sk: 'item_1235'
                    })];
            case 9:
                _a.sent();
                return [4 /*yield*/, (0, db_1.removeDbItem)({
                        pk: 'user_1236',
                        sk: 'item_1236'
                    })];
            case 10:
                _a.sent();
                expect(removedItem).toEqual({ pk: 'user_1234', sk: 'item_1234' });
                return [4 /*yield*/, (0, db_1.getDbItem)({
                        pk: 'user_1234',
                        sk: 'item_1234'
                    })];
            case 11:
                noItem = _a.sent();
                expect(noItem).toEqual(false);
                return [4 /*yield*/, (0, db_1.setDbItem)({
                        pk: 'user_1235',
                        sk: 'item_@id'
                    })];
            case 12:
                idTestItem = _a.sent();
                return [4 /*yield*/, (0, db_1.removeDbItem)(idTestItem)];
            case 13:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
test('db pagination works', function () { return __awaiter(void 0, void 0, void 0, function () {
    var item, item2, item3, item4, list1, list2;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, (0, db_1.setDbItem)({
                    pk: 'team_1234',
                    sk: 'item_1234'
                })];
            case 1:
                item = _a.sent();
                return [4 /*yield*/, (0, db_1.setDbItem)({
                        pk: 'team_1234',
                        sk: 'item_1235'
                    })];
            case 2:
                item2 = _a.sent();
                return [4 /*yield*/, (0, db_1.setDbItem)({
                        pk: 'team_1234',
                        sk: 'item_1236'
                    })];
            case 3:
                item3 = _a.sent();
                return [4 /*yield*/, (0, db_1.setDbItem)({
                        pk: 'team_1234',
                        sk: 'item_1237'
                    })];
            case 4:
                item4 = _a.sent();
                return [4 /*yield*/, (0, db_1.listDbItems)({
                        pk: 'team_1234',
                        sk: 'item',
                        limit: 2
                    })];
            case 5:
                list1 = _a.sent();
                expect(list1).toEqual([
                    { pk: 'team_1234', sk: 'item_1234' },
                    { pk: 'team_1234', sk: 'item_1235' }
                ]);
                return [4 /*yield*/, (0, db_1.listDbItems)({
                        pk: 'team_1234',
                        sk: 'item',
                        limit: 2,
                        startAt: list1[1]
                    })];
            case 6:
                list2 = _a.sent();
                expect(list2).toEqual([
                    { pk: 'team_1234', sk: 'item_1236' },
                    { pk: 'team_1234', sk: 'item_1237' }
                ]);
                return [4 /*yield*/, (0, db_1.removeDbItem)(item)];
            case 7:
                _a.sent();
                return [4 /*yield*/, (0, db_1.removeDbItem)(item2)];
            case 8:
                _a.sent();
                return [4 /*yield*/, (0, db_1.removeDbItem)(item3)];
            case 9:
                _a.sent();
                return [4 /*yield*/, (0, db_1.removeDbItem)(item4)];
            case 10:
                _a.sent();
                return [2 /*return*/];
        }
    });
}); });
